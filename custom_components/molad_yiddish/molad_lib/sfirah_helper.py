import logging
from datetime import timedelta, date, datetime

from astral import LocationInfo
from astral.sun import sun
from homeassistant.core import HomeAssistant
from homeassistant.util import dt as dt_util

_LOGGER = logging.getLogger(__name__)

# Texts for Sefirah Counter (Omer)
SEFIRA_TEXTS = [
  "ספירת העומר",
  "הַיּוֹם יוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם חֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁבְעָה יָמִים שֶׁהֵם שָׁבֽוּעַ אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שְׁמוֹנָה יָמִים שֶׁהֵם שָׁבֽוּעַ אֶחָד וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם תִּשְׁעָה יָמִים שֶׁהֵם שָׁבֽוּעַ אֶחָד וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם עֲשָׂרָה יָמִים שֶׁהֵם שָׁבֽוּעַ אֶחָד וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַחַד עָשָׂר יוֹם שֶׁהֵם שָׁבֽוּעַ אֶחָד וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁנֵים עָשָׂר יוֹם שֶׁהֵם שָׁבֽוּעַ אֶחָד וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשָׁה עָשָׂר יוֹם שֶׁהֵם שָׁבֽוּעַ אֶחָד וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעָה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת לָעֹֽמֶר", 
  "הַיּוֹם חֲמִשָּׁה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שִׁשָּׁה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁבְעָה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁמוֹנָה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם תִּשְׁעָה עָשָׂר יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם עֶשְׂרִים יוֹם שֶׁהֵם שְׁנֵי שָׁבוּעוֹת וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אֶחָד וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת לָעֹֽמֶר", 
  "הַיּוֹם שְׁנַֽיִם וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשָׁה וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעָה וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם חֲמִשָּׁה וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁשָּׁה וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁבְעָה וְעֶשְׂרִים יוֹם שֶׁהֵם שְׁלֹשָׁה שָׁבוּעוֹת וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁמוֹנָה וְעֶשְׂרִים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת לָעֹֽמֶר", 
  "הַיּוֹם תִּשְׁעָה וְעֶשְׂרִים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשִׁים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אֶחָד וּשְׁלֹשִׁים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁנַֽיִם וּשְׁלֹשִׁים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשָׁה וּשְׁלֹשִׁים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעָה וּשְׁלֹשִׁים יוֹם שֶׁהֵם אַרְבָּעָה שָׁבוּעוֹת וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם חֲמִשָּׁה וּשְׁלֹשִׁים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת לָעֹֽמֶר", 
  "הַיּוֹם שִׁשָּׁה וּשְׁלֹשִׁים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם שִׁבְעָה וּשְׁלֹשִׁים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁמוֹנָה וּשְׁלֹשִׁים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם תִּשְׁעָה וּשְׁלֹשִׁים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעִים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם אֶחָד וְאַרְבָּעִים יוֹם שֶׁהֵם חֲמִשָּׁה שָׁבוּעוֹת וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁנַֽיִם וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת לָעֹֽמֶר", 
  "הַיּוֹם שְׁלֹשָׁה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וְיוֹם אֶחָד לָעֹֽמֶר", 
  "הַיּוֹם אַרְבָּעָה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וּשְׁנֵי יָמִים לָעֹֽמֶר", 
  "הַיּוֹם חֲמִשָּׁה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וּשְׁלֹשָׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁשָּׁה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וְאַרְבָּעָה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שִׁבְעָה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וַחֲמִשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם שְׁמוֹנָה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁשָּׁה שָׁבוּעוֹת וְשִׁשָּׁה יָמִים לָעֹֽמֶר", 
  "הַיּוֹם תִּשְׁעָה וְאַרְבָּעִים יוֹם שֶׁהֵם שִׁבְעָה שָׁבוּעוֹת לָעֹֽמֶר" 
]

# Middot texts for each day of Sefirah
SEFIRA_MIDDOS = [
  "ספירת העומר מידות",          
  "חֶסֶד שֶׁבְּחֶסֶד",
  "גְבוּרָה שֶׁבְּחֶסֶד",
  "תִּפְאֶרֶת שֶׁבְּחֶסֶד",
  "נֶצַח שֶׁבְּחֶסֶד",
  "הוֹד שֶׁבְּחֶסֶד",
  "יְסוֹד שֶׁבְּחֶסֶד",
  "מַלְכוּת שֶׁבְּחֶסֶד",
  "חֶסֶד שֶׁבְּגְבוּרָה",
  "גְבוּרָה שֶׁבְּגְבוּרָה",
  "תִּפְאֶרֶת שֶׁבְּגְבוּרָה",
  "נֶצַח שֶׁבְּגְבוּרָה",
  "הוֹד שֶׁבְּגְבוּרָה",
  "יְסוֹד שֶׁבְּגְבוּרָה",
  "מַלְכוּת שֶׁבְּגְבוּרָה",
  "חֶסֶד שֶׁבְּתִּפְאֶרֶת",
  "גְבוּרָה שֶׁבְּתִּפְאֶרֶת",
  "תִּפְאֶרֶת שֶׁבְּתִּפְאֶרֶת",
  "נֶצַח שֶׁבְּתִּפְאֶרֶת",
  "הוֹד שֶׁבְּתִּפְאֶרֶת",
  "יְסוֹד שֶׁבְּתִּפְאֶרֶת",
  "מַלְכוּת שֶׁבְּתִּפְאֶרֶת",
  "חֶסֶד שֶׁבְּנֶצַח",
  "גְבוּרָה שֶׁבְּנֶצַח",
  "תִּפְאֶרֶת שֶׁבְּנֶצַח",
  "נֶצַח שֶׁבְּנֶצַח",
  "הוֹד שֶׁבְּנֶצַח",
  "יְסוֹד שֶׁבְּנֶצַח",
  "מַלְכוּת שֶׁבְּנֶצַח",
  "חֶסֶד שֶׁבְּהוֹד",
  "גְבוּרָה שֶׁבְּהוֹד",
  "תִּפְאֶרֶת שֶׁבְּהוֹד",
  "נֶצַח שֶׁבְּהוֹד",
  "הוֹד שֶׁבְּהוֹד",
  "יְסוֹד שֶׁבְּהוֹד",
  "מַלְכוּת שֶׁבְּהוֹד",
  "חֶסֶד שֶׁבְּיְסוֹד",
  "גְבוּרָה שֶׁבְּיְסוֹד",
  "תִּפְאֶרֶת שֶׁבְּיְסוֹד",
  "נֶצַח שֶׁבְּיְסוֹד",
  "הוֹד שֶׁבְּיְסוֹד",
  "יְסוֹד שֶׁבְּיְסוֹד",
  "מַלְכוּת שֶׁבְּיְסוֹד",
  "חֶסֶד שֶׁבְּמַלְכוּת",
  "גְבוּרָה שֶׁבְּמַלְכוּת",
  "תִּפְאֶרֶת שֶׁבְּמַלְכוּת",
  "נֶצַח שֶׁבְּמַלְכוּת",
  "הוֹד שֶׁבְּמַלְכוּת",
  "יְסוֹד שֶׁבְּמַלְכוּת",
  "מַלְכוּת שֶׁבְּמַלְכוּת"
]

class SfirahHelper:
    """
    Helper to compute current sefirah (Omer) texts based on local sunset + 72 minutes.
    """
    def __init__(self, hass: HomeAssistant):
        self.hass = hass
        self.latitude = hass.config.latitude
        self.longitude = hass.config.longitude
        self.time_zone = hass.config.time_zone

    def _get_threshold(self, for_date: date) -> datetime:
        """Return the datetime of sunset + 72 minutes for the given date."""
        loc = LocationInfo(
            name="", region="", timezone=self.time_zone,
            latitude=self.latitude, longitude=self.longitude
        )
        s = sun(loc.observer, date=for_date, tzinfo=dt_util.DEFAULT_TIME_ZONE)
        return s["sunset"] + timedelta(minutes=72)

    def get_effective_omer_day(self) -> int:
        """
        Read the raw omer day from sensor.jewish_calendar_day_of_the_omer,
        then bump by 1 if current time is past sunset + 72 minutes.
        """
        state = self.hass.states.get("sensor.jewish_calendar_day_of_the_omer")
        try:
            omer_day = int(state.state)
        except Exception:
            _LOGGER.warning("Invalid Omer day state: %s", state)
            return 0

        now = dt_util.now()
        threshold_today = self._get_threshold(now.date())
        if now >= threshold_today:
            omer_day += 1
        return max(0, min(omer_day, len(SEFIRA_TEXTS) - 1))

    def get_sefirah_text(self) -> str:
        """Return the Hebrew text for the current sefirah day."""
        day = self.get_effective_omer_day()
        return SEFIRA_TEXTS[day]

    def get_middos_text(self) -> str:
        """Return the Hebrew middot text for the current sefirah day."""
        day = self.get_effective_omer_day()
        return SEFIRA_MIDDOS[day]
